{"version":3,"sources":["components/Filter.js","components/Pagination.js","components/Search.js","utilities/helpers.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","props","states","genres","item","useState","filterOn","setFilterOn","useEffect","onAddStateFilter","onAddGenreFilterHandler","name","id","onChange","event","preventDefault","target","value","defaultValue","map","Pagination","rowsPerPage","totalRows","onPaginate","pageNumbers","i","Math","ceil","push","className","number","onClick","href","Search","searchTerm","setSearchTerm","search","setSearch","onSearch","type","e","genreTableFilterToArray","restaurants","genreFilter","gf","r","rf","length","genre","includes","stateTableFilterToArray","stateFilter","sf","state","currentRows","rows","indexOfLastRow","indexOfFirstRow","cR","colSpan","element","Table","stateData","setRows","setStateFilter","setGenreFilter","setGenres","currentPage","setCurrentPage","searchFor","query","sortTable","searchResults","q","toLowerCase","forEach","city","searchToArray","restaurantSort","sort","a","b","sortTableToArray","telephone","callback","genresArray","restaurant","array","split","Set","allGenres","stateTableFilter","genreTableFilter","term","bool","pageNumber","App","error","setError","isLoaded","setIsLoaded","setRestaurants","fetch","headers","Authorization","then","res","json","result","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b82ae9db.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Filter = (props) => {\n  const states = props.states;\n  const genres = props.genres;\n  const item = props.states || props.genres;\n  const [filterOn, setFilterOn] = useState();\n\n  useEffect(() => {\n    if (states) {\n      props.onAddStateFilter(filterOn);\n    }\n    if (genres) {\n      props.onAddGenreFilterHandler(filterOn);\n    }\n  }, [filterOn]);\n\n  const setFilter = (event) => {\n    event.preventDefault();\n    setFilterOn(event.target.value);\n  };\n\n  return (\n    <div>\n      <select name=\"states\" id=\"states\" onChange={setFilter}>\n        <option value=\"all\" defaultValue>\n          All\n        </option>\n        {item &&\n          item.map((item) => (\n            <option key={item} value={item}>\n              {item}\n            </option>\n          ))}\n        ;\n      </select>\n    </div>\n  );\n};\nexport default Filter;\n","import React from \"react\";\n\nconst Pagination = ({ rowsPerPage, totalRows, onPaginate }) => {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalRows / rowsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        {pageNumbers.map((number) => (\n          <li key={number} className=\"page-item\">\n            <a className='page-link' onClick={() => onPaginate(number)} href=\"!#\">\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React, { useState, useEffect } from \"react\";\n\nconst Search = (props) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [search, setSearch] = useState(false);\n\n  useEffect(() => {\n    props.onSearch(searchTerm, search);\n  }, [search]);\n\n  const handleSearch = (event) => {\n    event.preventDefault();\n    setSearch(true);\n  };\n\n  const handleClearSearch = (event) => {\n    event.preventDefault();\n    setSearchTerm(\"\");\n    setSearch(false);\n  };\n\n  return (\n    <div className=\"input-group col-md-3\">\n      <input\n        type=\"text\"\n        name=\"search\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        className=\"form-control\"\n      />\n      <div className=\"input-group-append\">\n        {search && (\n          <button\n            type=\"submit\"\n            value=\"x\"\n            onClick={handleClearSearch}\n            className=\"btn btn-outline-danger\"\n          >\n            Cancel\n          </button>\n        )}\n        {!search && (\n          <button\n            type=\"submit\"\n            value=\"Search\"\n            onClick={handleSearch}\n            className=\"btn btn-outline-success\"\n          >\n            Search\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","export function makeRows(data, callback) {\n  const formattedRows = data.map((restaurants) => (\n    <tr key={restaurants.id}>\n      <td>{restaurants.name}</td>\n      <td>{restaurants.city}</td>\n      <td>{restaurants.state}</td>\n      <td>{restaurants.telephone}</td>\n      <td>{restaurants.genre}</td>\n    </tr>\n  ));\n  callback(formattedRows);\n}\n\nexport function sortTableToArray(restaurants) {\n  const restaurantSort = [...restaurants];\n  restaurantSort.sort((a, b) => {\n    if (a.name < b.name) {\n      return -1;\n    }\n    if (a.name > b.name) {\n      return 1;\n    }\n    return 0;\n  });\n  return restaurantSort;\n}\n\nexport function genreTableFilterToArray(restaurants, genreFilter) {\n  const gf = genreFilter;\n  const r = restaurants;\n  const rf = [];\n  for (let i = 0; i < r.length; i++) {\n    if (r[i].genre.includes(gf)) {\n      rf.push(r[i]);\n    }\n  }\n  return rf;\n}\n\nexport function stateTableFilterToArray(restaurants, stateFilter) {\n  const sf = stateFilter;\n  const r = restaurants;\n  const rf = [];\n\n  for (let i = 0; i < r.length; i++) {\n    if (r[i].state === sf) {\n      rf.push(r[i]);\n    }\n  }\n  return rf;\n}\n\nexport function allGenres(restaurants, callback) {\n  const genresArray = [];\n  restaurants.forEach((restaurant) => {\n    const array = [];\n    array.push(restaurant.genre);\n    array.forEach((r) => {\n      r.split(\",\").forEach((r) => {\n        genresArray.push(r);\n      });\n    });\n  });\n  const uniqueGenres = [...new Set(genresArray)];\n  callback(uniqueGenres);\n}\n\nexport function searchToArray(restaurants, query, stateFilter, genreFilter) {\n  let searchResults = [];\n  const q = query.toLowerCase();\n  restaurants.forEach((r) => {\n    if (\n      r.name.toLowerCase().includes(q) ||\n      r.city.toLowerCase().includes(q) ||\n      r.genre.toLowerCase().includes(q)\n    ) {\n      searchResults.push(r);\n    }\n  });\n  if (\n    (!stateFilter || stateFilter === \"all\") &&\n    (!genreFilter || genreFilter === \"all\")\n  ) {\n    return searchResults;\n  } else if (!genreFilter || genreFilter === \"all\") {\n    searchResults = stateTableFilterToArray(searchResults, stateFilter);\n    return searchResults;\n  } else if (!stateFilter || stateFilter === \"all\") {\n    searchResults = genreTableFilterToArray(searchResults, genreFilter);\n    return searchResults;\n  } else {\n    searchResults = stateTableFilterToArray(\n      genreTableFilterToArray(searchResults, genreFilter),\n      stateFilter\n    );\n    return searchResults;\n  }\n}\n\nexport const currentRows = (rows, indexOfLastRow, indexOfFirstRow) => {\n  const cR = [];\n  if (rows.length > 0) {\n    for (let i = indexOfFirstRow; i < indexOfLastRow; i++) {\n      const element = rows[i];\n      cR.push(element);\n    }\n  } else {\n    const noRows = (\n      <tr>\n        <td colSpan=\"5\">no restaurants found</td>\n      </tr>\n    );\n    return noRows;\n  }\n  return cR;\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport stateData from \"../data/states.json\";\nimport Filter from \"./Filter\";\nimport Pagination from \"./Pagination\";\nimport Search from \"./Search\";\nimport {\n  makeRows,\n  sortTableToArray,\n  genreTableFilterToArray,\n  stateTableFilterToArray,\n  allGenres,\n  searchToArray,\n  currentRows\n} from \"../utilities/helpers\";\n\nconst Table = (props) => {\n  const restaurants = props.restaurants;\n  const states = stateData;\n  const [rows, setRows] = useState([]);\n  const [stateFilter, setStateFilter] = useState();\n  const [genreFilter, setGenreFilter] = useState();\n  const [genres, setGenres] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [search, setSearch] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const rowsPerPage = 10;\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n\n  useEffect(() => {\n    sortTable(restaurants);\n    allGenres(restaurants, setGenres);\n  }, [restaurants]);\n\n  useEffect(() => {\n    if (!searchTerm) {\n      stateTableFilter(restaurants, stateFilter);\n    } else {\n      searchFor(restaurants, searchTerm, stateFilter, genreFilter);\n    }\n  }, [stateFilter]);\n\n  useEffect(() => {\n    if (!searchTerm) {\n      genreTableFilter(restaurants, genreFilter);\n    } else {\n      searchFor(restaurants, searchTerm, stateFilter, genreFilter);\n    }\n  }, [genreFilter]);\n\n  useEffect(() => {\n    searchFor(restaurants, searchTerm);\n  }, [searchTerm]);\n\n  useEffect(() => {\n    if (!search) {\n      sortTable(restaurants);\n    }\n  }, [search]);\n\n  function searchFor(restaurants, query, stateFilter, genreFilter) {\n    sortTable(searchToArray(restaurants, query, stateFilter, genreFilter));\n  }\n\n  function stateTableFilter(restaurants, stateFilter) {\n    if (stateFilter === \"all\") {\n      sortTable(restaurants);\n    } else {\n      sortTable(stateTableFilterToArray(restaurants, stateFilter));\n    }\n  }\n\n  function genreTableFilter(restaurants, genreFilter) {\n    if (genreFilter === \"all\") {\n      sortTable(restaurants);\n    } else {\n      sortTable(genreTableFilterToArray(restaurants, genreFilter));\n    }\n  }\n\n  function sortTable(restaurants) {\n    const restaurantSort = sortTableToArray(restaurants);\n    makeRows(restaurantSort, setRows);\n  }\n\n  const addStateFilterHandler = (stateFilter) => {\n    setStateFilter(stateFilter);\n  };\n\n  const addGenreFilterHandler = (genreFilter) => {\n    setGenreFilter(genreFilter);\n  };\n\n  const searchForTerm = (term, bool) => {\n    setSearchTerm(term);\n    setSearch(bool);\n  };\n\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  return (\n    <div>\n      <Search onSearch={searchForTerm} />\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>city</th>\n            <th>\n              state\n              <br />\n              <Filter\n                states={states}\n                onAddStateFilter={addStateFilterHandler}\n              />\n            </th>\n            <th>telephone</th>\n            <th>\n              genre\n              <br />\n              <Filter\n                genres={genres}\n                onAddGenreFilterHandler={addGenreFilterHandler}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody>{currentRows(rows, indexOfLastRow, indexOfFirstRow)}</tbody>\n      </table>\n      <Pagination\n        rowsPerPage={rowsPerPage}\n        totalRows={rows.length}\n        onPaginate={paginate}\n      />\n    </div>\n  );\n};\n\nexport default Table;\n","import { useEffect, useState } from \"react\";\n\nimport Table from \"./components/Table\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n      headers: {\n        Authorization: \"Api-Key q3MNxtfep8Gt\",\n      },\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setRestaurants(result);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div>\n        <div className=\"container\">\n          <h1>BACON</h1>\n        </div>\n        <div className=\"container\">\n          <Table restaurants={restaurants} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}